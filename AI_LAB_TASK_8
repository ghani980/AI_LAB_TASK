//Write code for Min Max Algorithm

import math

# Constants for the game
PLAYER_X = 'X'
PLAYER_O = 'O'
EMPTY = ' '

# Function to check if the game is over (win, draw, or ongoing)
def check_winner(board):
    # Check rows, columns, and diagonals for a win
    for row in range(3):
        if board[row][0] == board[row][1] == board[row][2] != EMPTY:
            return board[row][0]
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] != EMPTY:
            return board[0][col]
    if board[0][0] == board[1][1] == board[2][2] != EMPTY:
        return board[0][0]
    if board[0][2] == board[1][1] == board[2][0] != EMPTY:
        return board[0][2]
    
    # Check for a draw (no empty spots left)
    if all(board[row][col] != EMPTY for row in range(3) for col in range(3)):
        return 'Draw'
    
    return None  # Game is still ongoing

# Minimax function to recursively calculate the best move
def minimax(board, depth, is_maximizing_player):
    winner = check_winner(board)
    if winner == PLAYER_X:
        return 1  # Maximize for X
    elif winner == PLAYER_O:
        return -1  # Minimize for O
    elif winner == 'Draw':
        return 0  # Draw

    if is_maximizing_player:
        best = -math.inf
        for row in range(3):
            for col in range(3):
                if board[row][col] == EMPTY:
                    board[row][col] = PLAYER_X  # AI move
                    best = max(best, minimax(board, depth + 1, False))
                    board[row][col] = EMPTY  # Undo move
        return best
    else:
        best = math.inf
        for row in range(3):
            for col in range(3):
                if board[row][col] == EMPTY:
                    board[row][col] = PLAYER_O  # Opponent move
                    best = min(best, minimax(board, depth + 1, True))
                    board[row][col] = EMPTY  # Undo move
        return best

# Function to find the best move for the AI (Maximizing player)
def find_best_move(board):
    best_val = -math.inf
    best_move = None

    for row in range(3):
        for col in range(3):
            if board[row][col] == EMPTY:
                board[row][col] = PLAYER_X  # AI move
                move_val = minimax(board, 0, False)
                board[row][col] = EMPTY  # Undo move

                if move_val > best_val:
                    best_move = (row, col)
                    best_val = move_val

    return best_move

# Function to print the board
def print_board(board):
    for row in board:
        print(' | '.join(row))
        print('-' * 5)

# Main function to simulate the game
def play_game():
    # Initial empty board
    board = [[EMPTY] * 3 for _ in range(3)]

    while True:
        print_board(board)
        
        # AI (Player X) move
        print("AI's move (X):")
        best_move = find_best_move(board)
        if best_move:
            board[best_move[0]][best_move[1]] = PLAYER_X
        else:
            print("It's a draw!")
            break

        winner = check_winner(board)
        if winner:
            print_board(board)
            if winner == PLAYER_X:
                print("AI wins!")
            elif winner == PLAYER_O:
                print("You win!")
            else:
                print("It's a draw!")
            break

        # Player (Player O) move
        print_board(board)
        print("Your move (O):")
        row, col = map(int, input("Enter row and column (0, 1, 2): ").split())
        
        if board[row][col] == EMPTY:
            board[row][col] = PLAYER_O
        else:
            print("Invalid move. Try again.")
            continue

        winner = check_winner(board)
        if winner:
            print_board(board)
            if winner == PLAYER_X:
                print("AI wins!")
            elif winner == PLAYER_O:
                print("You win!")
            else:
                print("It's a draw!")
            break

# Run the game
play_game()
