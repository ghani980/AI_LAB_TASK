//Write code for A* Algorithm

import heapq

class Node:
    def __init__(self, position, g_cost=0, h_cost=0, parent=None):
        self.position = position  # (x, y) position of the node
        self.g_cost = g_cost  # Cost from start node to current node
        self.h_cost = h_cost  # Estimated cost from current node to goal node
        self.f_cost = g_cost + h_cost  # Total cost (f = g + h)
        self.parent = parent  # Parent node to reconstruct the path

    def __lt__(self, other):
        return self.f_cost < other.f_cost  # Priority is based on f_cost

def astar_algorithm(start, goal, grid):
    open_list = []  # Priority queue of nodes to explore
    closed_list = set()  # Set of visited nodes
    start_node = Node(start, g_cost=0, h_cost=heuristic(start, goal))
    
    # Push the start node to the open list (priority queue)
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)  # Node with the lowest f_cost

        if current_node.position == goal:
            return reconstruct_path(current_node)  # Goal reached, reconstruct path

        closed_list.add(current_node.position)  # Add current node to closed list

        # Check all neighbors
        for neighbor_pos in get_neighbors(current_node.position, grid):
            if neighbor_pos in closed_list:
                continue  # Skip if already visited

            # Calculate g, h, and f costs for the neighbor
            g_cost = current_node.g_cost + 1  # Assumed cost from current node to neighbor is 1
            h_cost = heuristic(neighbor_pos, goal)
            neighbor_node = Node(neighbor_pos, g_cost, h_cost, parent=current_node)

            # If neighbor is not in open list, add it
            if not any(neighbor.position == neighbor_node.position and neighbor.f_cost <= neighbor_node.f_cost for neighbor in open_list):
                heapq.heappush(open_list, neighbor_node)

    return None  # No path found

def heuristic(position, goal):
    # Using Manhattan distance as the heuristic
    return abs(position[0] - goal[0]) + abs(position[1] - goal[1])

def get_neighbors(position, grid):
    # List of possible moves (left, right, up, down)
    x, y = position
    neighbors = []
    
    for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:
        new_x, new_y = x + dx, y + dy
        
        # Ensure the new position is within grid bounds and is not an obstacle
        if 0 <= new_x < len(grid) and 0 <= new_y < len(grid[0]) and grid[new_x][new_y] != 1:
            neighbors.append((new_x, new_y))
    
    return neighbors

def reconstruct_path(node):
    path = []
    while node:
        path.append(node.position)
        node = node.parent
    return path[::-1]  # Reverse the path to get from start to goal

# Example grid (0 = free space, 1 = obstacle)
grid = [
    [0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0],
    [0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0]
]

start = (0, 0)  # Start position
goal = (4, 4)   # Goal position

# Running A* algorithm
path = astar_algorithm(start, goal, grid)
if path:
    print("Path found:", path)
else:
    print("No path found.")
